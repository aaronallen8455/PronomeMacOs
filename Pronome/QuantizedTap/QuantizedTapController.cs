// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.Collections.Generic;
using System.Linq;

namespace Pronome.Mac
{
    public partial class QuantizedTapController : NSViewController
    {
        #region Computed Fields
        private string _quantizationIntervalString;
        [Export("QuantizationIntervalString")]
        public string QuantizationIntervalString
        {
            get => _quantizationIntervalString;
            set
            {
                WillChangeValue("QuantizationIntervalString");
                // break into chunks
                string[] chunks = value.Split(',');

                //bool isValid = true;

                LinkedList<string> newIntervals = new LinkedList<string>();
                HashSet<double> touchedVals = new HashSet<double>();
                // check that each value is valid
                foreach (string chunk in chunks)
                {
                    if (BeatCell.TryParse(chunk, out double val) && !touchedVals.Contains(val))
                    {
                        //newIntervals.AddLast(val);
                        newIntervals.AddLast(BeatCell.SimplifyValue(chunk));
                        touchedVals.Add(val);
                    }
                    //else
                    //{
                    //    isValid = false;
                    //    break;
                    //}
                }

                if (newIntervals.Any())//isValid)
                {
                    // every value is valid
                    QuantizeIntervals = newIntervals;
                    _quantizationIntervalString = value;
                }

                DidChangeValue("QuantizationIntervalString");
            }
        }

        private Layer _layer;
        [Export("Layer")]
        public Layer Layer
        {
            get => _layer;
            set
            {
                WillChangeValue("Layer");
                _layer = value;
                DidChangeValue("Layer");
            }
        }

        private NSMutableArray<Layer> _layerArray;
        [Export("layerArray")]
        public NSMutableArray LayerArray
        {
            get => _layerArray;
        }

        [Export("Metronome")]
        public Metronome Met
        {
            get => Metronome.Instance;
        }

        private bool _isListening = false;
        [Export("IsListening")]
        public bool IsListening
        {
            get => _isListening;
            set
            {
                WillChangeValue("IsListening");
                _isListening = value;
                DidChangeValue("IsListening");
            }
        }

        private bool _countOff;
        [Export("CountOff")]
        public bool CountOff
        {
            get => _countOff;
            set
            {
                WillChangeValue("CountOff");
                _countOff = value;
                Metronome.Instance.Mixer.SetCountOff(value);
                DidChangeValue("CountOff");
            }
        }
        #endregion

        #region Public fields
        public NSViewController Presentor;
        #endregion

        #region Protected Variables
        /// <summary>
        /// The BPM position of each tap captured
        /// </summary>
        protected LinkedList<double> Taps = new LinkedList<double>();

        // TODO: should be a user setting
        /// <summary>
        /// The intervals to check against when quantizing
        /// </summary>
        protected LinkedList<string> QuantizeIntervals = new LinkedList<string>();
        #endregion

        #region Constructor
        public QuantizedTapController(IntPtr handle) : base(handle)
        {
            _layerArray = new NSMutableArray<Layer>(Metronome.Instance.Layers.ToArray());
        }
        #endregion

        #region Overridden Methods

        public override void KeyDown(NSEvent theEvent)
        {
            if (IsListening)
            {
                // check if we are in the count off
                if (Metronome.Instance.Mixer.CountOffSampleDuration > 0)
                {
                    Taps.AddLast(0);
                }
                else
                {
					Taps.AddLast(Metronome.Instance.ElapsedBpm);
                }
            }
        }

        partial void BeginAction(NSObject sender)
        {
            IsListening = true;
            // lose focus for any inputs
            View.Window.MakeFirstResponder(this);

            // start playing the beat if it isn't already (plus count-down)
            if (Metronome.Instance.PlayState == Metronome.PlayStates.Playing)
            {

            }
            //else if (CountOffCheckBox.State == NSCellStateValue.On)
            //{
            //    // do count-off
            //}
            else
            {
                TransportViewController.Instance.Play();

                var x = Metronome.Instance.ElapsedBpm;
            }
        }

        // if started listening when already playing,
        // find modulo of tapped entry length against
        // elapsed time of first tap
        // we use this to find the first part,
        // which will be a portion of the tap cycle
        // that may involve an offset

        partial void DoneAction(NSObject sender)
        {
            if (Taps.Count <= 1 || QuantizeIntervals.Count == 0) 
            {
				// need at least 2 to define a cell
                IsListening = false;

                Presentor.DismissViewController(this);
                return;
            }

            LinkedList<string> cellDurs = new LinkedList<string>();
            string last = "0";

            // get the quantized values
            foreach (string t in Taps.Select(x => Quantize(x)))
            {
                if (t == last) continue;
                cellDurs.AddLast(BeatCell.Subtract(t, last));
                last = t;
            }

            // determine the offset
            string length = BeatCell.Subtract(last, cellDurs.First.Value);
            long cycles = (long)(BeatCell.Parse(cellDurs.First()) / BeatCell.Parse(length));
            // remove extraneous cycles
            cellDurs.First.Value = BeatCell.Subtract(cellDurs.First(), BeatCell.MultiplyTerms(length, cycles));

            // rotate until offset is found
            string offset = cellDurs.First();
            cellDurs.RemoveFirst();

            while (BeatCell.Parse(offset) >= BeatCell.Parse(cellDurs.Last.Value))
            {
                offset = BeatCell.Subtract(offset, cellDurs.Last.Value);
                // rotate
                cellDurs.AddFirst(cellDurs.Last.Value);
                cellDurs.RemoveLast();
            }

            // modify the layer
            string beatCode = string.Join(",", cellDurs);

            Layer.SetBeatCode(beatCode, offset == string.Empty ? "0" : offset);
            Layer.Controller.HighlightBeatCodeSyntax();

            IsListening = false;

            Presentor.DismissViewController(this);
        }

        //partial void DoneAction(NSObject sender)
        //{
        //    if (Taps.Count <= 1 && QuantizeIntervals.Count > 0) return;  // need at least 2 to define a cell
		//
		//
        //    LinkedList<double> cellDurs = new LinkedList<double>();
        //    double last = 0;
        //    // get the quantized values
        //    foreach (double t in Taps.Select(x => Quantize(x)))
        //    {
        //        if (t == last) continue;
        //        cellDurs.AddLast(t - last);
        //        last = t;
        //    }
		//
        //    // determine offset
        //    double length = last - cellDurs.First.Value;
        //    long cycles = (long)(cellDurs.First.Value / length);
		//
        //    cellDurs.First.Value -= length * cycles;
		//
        //    // rotate to the actual orientation
        //    double offset = cellDurs.First.Value;
        //    cellDurs.RemoveFirst();
		//
        //    while (offset >= cellDurs.Last.Value)
        //    {
        //        offset -= cellDurs.Last.Value;
        //        // rotate
        //        cellDurs.AddFirst(cellDurs.Last.Value);
        //        cellDurs.RemoveLast();
        //    }
		//
        //    // modify the layer
        //    string beatCode = string.Join(",", cellDurs.Select(x => x.ToString()));
		//
        //    Layer.SetBeatCode(beatCode, offset.ToString());
		//
        //    IsListening = false;
		//
        //    Presentor.DismissViewController(this);
        //}

        /// <summary>
        /// The tap action. triggered by a key bind to a button that is positioned off screen.
        /// </summary>
        /// <param name="sender">Sender.</param>
        //partial void TapAction(NSObject sender)
        //{
        //    if (IsListening)
        //    {
        //        Taps.AddLast(Metronome.Instance.ElapsedBpm);
        //    }
        //}
        #endregion

        #region Protected Methods
        protected string Quantize(double value)
        {
            // use doubles to determine which interval is the match
            //double dval = BeatCell.Parse(value);

            var qs = QuantizeIntervals
                .Select(x => (x, BeatCell.Parse(x)))
                .SelectMany(x => { 
                int div = (int)(value / x.Item2); 
                return new[] { (x.Item1, div * x.Item2, div), (x.Item1, (div + 1) * x.Item2, div + 1) }; 
            });

            string r = "";
            double diff = double.MaxValue;

            foreach ((string interval, double total, int div) in qs)
            {
                double d = Math.Abs(value - total);
                if (d < diff)
                {
                    r = BeatCell.MultiplyTerms(interval, div);
                    diff = d;
                }
            }

            return r;
        }

        //protected double Quantize(double value)
        //{
        //    var qs = QuantizeIntervals
        //        .SelectMany(x => { int div = (int)(value / x); return new double[] { div * x, (div + 1) * x }; });
        //    //.Min(x => Math.Abs(value - x));
		//
        //    double r = 0;
        //    double diff = double.MaxValue;
		//
        //    // find match with minimal difference
        //    foreach (double q in qs)
        //    {
        //        double d = Math.Abs(value - q);
        //        if (d < diff)
        //        {
        //            r = q;
        //            diff = d;
        //        }
        //    }
		//
        //    return r;
        //}
        #endregion
    }
}
