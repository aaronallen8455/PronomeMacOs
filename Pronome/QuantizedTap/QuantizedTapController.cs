// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.Collections.Generic;

namespace Pronome.Mac
{
    public partial class QuantizedTapController : NSViewController
    {
        #region Computed Fields
        private string _quantizationIntervalString;
        [Export("QuantizationIntervalString")]
        public string QuantizationIntervalString
        {
            get => _quantizationIntervalString;
            set
            {
                WillChangeValue("QuantizationIntervalString");
                // break into chunks
                string[] chunks = value.Split(',');

                bool isValid = true;

                LinkedList<double> newIntervals = new LinkedList<double>();
                // check that each value is valid
                foreach (string chunk in chunks)
                {
                    if (BeatCell.TryParse(chunk, out double val))
                    {
                        newIntervals.AddLast(val);
                    }
                    else
                    {
                        isValid = false;
                        break;
                    }
                }

                if (isValid)
                {
                    // every value is valid
                    QIntervals = newIntervals;
                    _quantizationIntervalString = value;
                }

                DidChangeValue("QuantizationIntervalString");
            }
        }

        private Layer _layer;
        [Export("Layer")]
        public Layer Layer
        {
            get => _layer;
            set
            {
                WillChangeValue("Layer");
                _layer = value;
                DidChangeValue("Layer");
            }
        }

        private NSMutableArray<Layer> _layerArray;
        [Export("layerArray")]
        public NSMutableArray LayerArray
        {
            get => _layerArray;
        }

        [Export("Metronome")]
        public Metronome Met
        {
            get => Metronome.Instance;
        }
        #endregion

        #region Public fields
        public NSViewController Presentor;
        #endregion

        #region Protected Variables
        /// <summary>
        /// The BPM position of each tap captured
        /// </summary>
        protected LinkedList<double> Taps = new LinkedList<double>();

        // TODO: should be a user setting
        /// <summary>
        /// The intervals to check against when quantizing
        /// </summary>
        protected LinkedList<double> QIntervals = new LinkedList<double>();

        protected bool IsListening;
        #endregion

        #region Constructor
        public QuantizedTapController(IntPtr handle) : base(handle)
        {
            _layerArray = new NSMutableArray<Layer>(Metronome.Instance.Layers.ToArray());
        }
        #endregion

        #region Overridden Methods
        partial void BeginAction(NSObject sender)
        {
            IsListening = true;

            // start playing the beat if it isn't already (plus count-down)
        }

        partial void DoneAction(NSObject sender)
        {
            Presentor.DismissViewController(this);
        }

        public override void KeyDown(NSEvent theEvent)
        {
            base.KeyDown(theEvent);

            if (theEvent.KeyCode == 1 && Metronome.Instance.PlayState == Metronome.PlayStates.Playing)
            {
                // add current time position to the collection
                Taps.AddLast(Metronome.Instance.ElapsedBpm);
            }
        }
        #endregion
    }
}
