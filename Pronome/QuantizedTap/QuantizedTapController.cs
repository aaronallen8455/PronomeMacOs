// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.Collections.Generic;
using System.Linq;
using Pronome.Mac.Editor;
using Pronome.Mac.Editor.Groups;

namespace Pronome.Mac
{
    public partial class QuantizedTapController : NSViewController
    {
        #region Computed Fields
        private string _quantizationIntervalString;
        [Export("QuantizationIntervalString")]
        public string QuantizationIntervalString
        {
            get => _quantizationIntervalString;
            set
            {
                WillChangeValue("QuantizationIntervalString");
                // break into chunks
                string[] chunks = value.Split(',');

                //bool isValid = true;

                LinkedList<string> newIntervals = new LinkedList<string>();
                HashSet<double> touchedVals = new HashSet<double>();
                // check that each value is valid
                foreach (string chunk in chunks)
                {
                    if (BeatCell.TryParse(chunk, out double val) && !touchedVals.Contains(val))
                    {
                        //newIntervals.AddLast(val);
                        newIntervals.AddLast(BeatCell.SimplifyValue(chunk));
                        touchedVals.Add(val);
                    }
                    //else
                    //{
                    //    isValid = false;
                    //    break;
                    //}
                }

                if (newIntervals.Any())//isValid)
                {
                    // every value is valid
                    QuantizeIntervals = newIntervals;
                    _quantizationIntervalString = value;
                }

                DidChangeValue("QuantizationIntervalString");
            }
        }

        private Layer _layer;
        [Export("Layer")]
        public Layer Layer
        {
            get => _layer;
            set
            {
                WillChangeValue("Layer");
                _layer = value;
                DidChangeValue("Layer");
            }
        }

        private NSMutableArray<Layer> _layerArray;
        [Export("layerArray")]
        public NSMutableArray LayerArray
        {
            get => _layerArray;
        }

        [Export("Metronome")]
        public Metronome Met
        {
            get => Metronome.Instance;
        }

        private bool _isListening = false;
        [Export("IsListening")]
        public bool IsListening
        {
            get => _isListening;
            set
            {
                WillChangeValue("IsListening");
                _isListening = value;
                DidChangeValue("IsListening");
            }
        }

        private bool _countOff;
        [Export("CountOff")]
        public bool CountOff
        {
            get => _countOff;
            set
            {
                WillChangeValue("CountOff");
                _countOff = value;
                Metronome.Instance.Mixer.SetCountOff(value);
                DidChangeValue("CountOff");
            }
        }
        #endregion

        #region Public fields
        public NSViewController Presentor;
        #endregion

        #region Protected Variables
        /// <summary>
        /// The BPM position of each tap captured
        /// </summary>
        protected LinkedList<double> Taps = new LinkedList<double>();

        // TODO: should be a user setting
        /// <summary>
        /// The intervals to check against when quantizing
        /// </summary>
        protected LinkedList<string> QuantizeIntervals = new LinkedList<string>();

        const int MODE_OVERWRITE = 0;

        const int MODE_INSERT = 1;
        #endregion

        #region Constructor
        public QuantizedTapController(IntPtr handle) : base(handle)
        {
            _layerArray = new NSMutableArray<Layer>(Metronome.Instance.Layers.ToArray());
        }
        #endregion

        #region Overridden Methods

        public override void KeyDown(NSEvent theEvent)
        {
            if (IsListening)
            {
                // check if we are in the count off
                if (Metronome.Instance.Mixer.CountOffSampleDuration > 0)
                {
                    Taps.AddLast(0);
                }
                else
                {
					Taps.AddLast(Metronome.Instance.ElapsedBpm);
                }
            }
        }

        partial void BeginAction(NSObject sender)
        {
            IsListening = true;
            // lose focus for any inputs
            View.Window.MakeFirstResponder(this);

            // start playing the beat if it isn't already (plus count-down)
            if (Metronome.Instance.PlayState != Metronome.PlayStates.Playing)
            {
				TransportViewController.Instance.Play();

            }
        }

        // if started listening when already playing,
        // find modulo of tapped entry length against
        // elapsed time of first tap
        // we use this to find the first part,
        // which will be a portion of the tap cycle
        // that may involve an offset

        partial void DoneAction(NSObject sender)
        {
            if (Taps.Count <= 1 || QuantizeIntervals.Count == 0) 
            {
				// need at least 2 to define a cell
                IsListening = false;

                Presentor.DismissViewController(this);
                return;
            }

            if (ModeDropdown.SelectedTag == MODE_OVERWRITE)
            {
				
				LinkedList<string> cellDurs = new LinkedList<string>();
				string last = "0";
				
				// get the quantized values
				foreach (string t in Taps.Select(x => Quantize(x)))
				{
					if (t == last) continue;
					cellDurs.AddLast(BeatCell.Subtract(t, last));
					last = t;
				}
				
				// determine the offset
				string length = BeatCell.Subtract(last, cellDurs.First.Value);
				long cycles = (long)(BeatCell.Parse(cellDurs.First()) / BeatCell.Parse(length));
				// remove extraneous cycles
				cellDurs.First.Value = BeatCell.Subtract(cellDurs.First(), BeatCell.MultiplyTerms(length, cycles));
				
				// rotate until offset is found
				string offset = cellDurs.First();
				cellDurs.RemoveFirst();
				
				while (BeatCell.Parse(offset) >= BeatCell.Parse(cellDurs.Last.Value))
				{
					offset = BeatCell.Subtract(offset, cellDurs.Last.Value);
					// rotate
					cellDurs.AddFirst(cellDurs.Last.Value);
					cellDurs.RemoveLast();
				}
				
				// modify the layer
				string beatCode = string.Join(",", cellDurs);

                Layer.SetBeatCode(beatCode, offset == string.Empty ? "0" : offset);
            }
            else if (ModeDropdown.SelectedTag == MODE_INSERT)
            {
                // how to deal with inserting cells into a rep group?
                // easy way is to just flatten it out, use raw values from .Beat
                // ideally we want to insert the cell and retain the original beatCode aspects

                // retain a int for the current cell index in the beatcode
                // so when we run a rep group, the index will backtrack as needed

                // will also need to deal with mult groups
                // when accumulating cell values, we 'expand' out the multgroups
                // so that we are dealing with actual values
                // after all work is done, we 'contract' the multgroups

                // if below cell is a | termination, the new cell will be one.

                // could use the modeling objects from the editor?

                // could reuse the editor insert cell operation
                // only difference is that if we insert a cell into a rep group,
                // theres some special cases:
                // 1) if inserting into first or last group of a rep with >2 times,
                // we break off the cycle being inserted into and decrement
                // the times of the group
                // 2) if the group has times == 2 then the group is de-sugared.
                // this entails adding the LTM to the last cell
                // 3) if the same insertion is made on each repeat, we can use the
                // default behaviour of the editor insert action.

                // if a tap occurs during a reference, we desugar the reference

                // get the objects representing the beatcode
                Row row = new Row(Layer);



                // get the layers total length
                double bpmLength = Layer.GetTotalBpmValue();

                string offset = "";

                foreach (double t in Taps)
                {
                    // check if tap was done in the offset area
                    if (t <= Layer.OffsetBpm)
                    {
                        offset = Quantize(t);

                        string cellValue = BeatCell.Subtract(Layer.ParsedOffset, offset);

                        if (cellValue != "" && cellValue != "0")
                        {
                            // insert cell at start of beat and change the offset
                            Cell cell = new Cell(row)
                            {
                                Value = cellValue
                            };

                            if (row.Cells.Insert(cell))
                            {
                                Layer.ParsedOffset = offset;
                                Layer.OffsetBpm = BeatCell.Parse(offset);
                            }
                        }

                        continue;
                    }

                    // get the number of elapsed cycles
                    int cycles = (int)(t / bpmLength);

                    // subtract the elapsed cycles
                    double pos = t - cycles * bpmLength;
                    string belowValue = Quantize(pos);
                    double qPos = BeatCell.Parse(belowValue); // quantized BPM position double

                    // calc the added up cell values to the one below the inserted tap
                    double elapsed = Layer.OffsetBpm;
                    int beatIndex = 0;


                    // going to iterate over all the cells
                    CellTreeNode cellNode = row.Cells.Min;

                    // rep groups that have been traversed and should'nt be touched again
                    HashSet<Repeat> touchedReps = new HashSet<Repeat>();

					Repeat repWithLtmToInsertInto = null;

                    // the nested repeat groups paired with the number of the repeat in which to insert
                    Dictionary<Repeat, int> repToInsertInto = new Dictionary<Repeat, int>();

                    while (cellNode != null)
                    {
                        Cell c = cellNode.Cell;
                        // will need to desugar if it's a ref

                        foreach (Repeat rep in c.RepeatGroups.Where(x => !touchedReps.Contains(x)))
                        {
                            // see if the total duration of this rep group is shorter than tap position
                            // then we know that we will be inserting into this rep group at one of it's times. need to know which one.
                            // rep.Length does not include the times, it's only one cycle
                            if (qPos < rep.Position + rep.Length * rep.Times)
                            {
                                int times = (int)(rep.Length * rep.Times / (qPos - rep.Position));
                                repToInsertInto.Add(rep, times);
                            }
                            else
                            {
                                // subtract each repeated cell's value from the total
                                foreach (Cell rcell in rep.Cells)
                                {
                                    string val = BeatCell.MultiplyTerms(rcell.GetValueWithMultFactors(), rep.Times);
                                    belowValue = BeatCell.Subtract(belowValue, val);
                                }
                                qPos -= rep.Length;

								// see if we are inserting into the LTM
								if (qPos < BeatCell.Parse(rep.GetLtmWithMultFactor()))
								{
									//rep.LastTermModifier = belowValue;
									//
									//// check if this is the terminating position of any groups and transfer the group action if so
									//Cell newCell = new Cell(row);
									//
									//foreach (var action in rep.Cells.Last.Value.GroupActions)
									//{
									//    if (action.Item2.Length > rep.Length)
									//    {
									//        newCell.GroupActions.AddLast(action);
									//    }
									//}
									//
									//foreach (var action in newCell.GroupActions)
									//{
									//    rep.Cells.Last.Value.GroupActions.Remove(action);
									//}
									//
									//row.Cells.Insert(newCell);
									
									// should be done with the tap at this point.
									repWithLtmToInsertInto = rep;
									break;
									
								}
                            }


                            touchedReps.Add(rep);
                        }

                        if (repToInsertInto.Any())
                        {
                            // need to break up the groups that are being inserted into
                            HashSet<Repeat> touched = new HashSet<Repeat>();
                            foreach (KeyValuePair<Repeat, int> pair in repToInsertInto.Reverse())
                            {
                                if (pair.Value == 1)
                                {
                                    // terminates on first rep
                                    // make deep copies
                                    var copiedCells = Cell.DeepCopyCells(pair.Key.Cells.Where(x => !x.RepeatGroups.Any(g => !touched.Contains(g))), pair.Key);

                                    // if only 2 repeats, we are getting rid of the group
                                    if (pair.Key.Times == 2)
                                    {
                                        foreach (Cell cel in pair.Key.Cells)
                                        {
                                            cel.RepeatGroups.Remove(pair.Key);
                                        }
                                        pair.Key.Cells.Min().GroupActions.Remove((true, pair.Key));
                                        pair.Key.Cells.Max().GroupActions.Remove((false, pair.Key));
                                    }

                                    // finish getting the below value
                                    while (qPos > cellNode.Cell.Duration)
                                    {
                                        belowValue = BeatCell.Subtract(belowValue, cellNode.Cell.Value);
                                        qPos -= cellNode.Cell.Duration;
                                        cellNode = cellNode.Next();
                                    }

                                    // assign the new below cell value

                                    // insert new cell

                                    // need to change the position of all cells from orig group up
                                    // TODO
                                }
                                else if (pair.Value == pair.Key.Times)
                                {
                                    // terminates on last rep
                                }
                                else
                                {
                                    // terminates in a middle rep
                                }

                                touched.Add(pair.Key);
                            }
                        }

                        if (repWithLtmToInsertInto != null)
                        {
                            // need to decompress any rep groups that were split by the tap

                        }


                        elapsed += bc.Bpm;

                        if (elapsed < pos)
                        {
							belowValue = BeatCell.Subtract(belowValue, bc.ParsedString);
                            beatIndex++;
                        }
                        else
                        {
                            elapsed -= bc.Bpm;
                            break;
                        }

                        cellNode = cellNode.Next();
                    }

                    // get new value of the below cell

                    // get value of tapped cell
                }
            }

            Layer.Controller.HighlightBeatCodeSyntax();

            IsListening = false;

            Presentor.DismissViewController(this);
        }

        //partial void DoneAction(NSObject sender)
        //{
        //    if (Taps.Count <= 1 && QuantizeIntervals.Count > 0) return;  // need at least 2 to define a cell
		//
		//
        //    LinkedList<double> cellDurs = new LinkedList<double>();
        //    double last = 0;
        //    // get the quantized values
        //    foreach (double t in Taps.Select(x => Quantize(x)))
        //    {
        //        if (t == last) continue;
        //        cellDurs.AddLast(t - last);
        //        last = t;
        //    }
		//
        //    // determine offset
        //    double length = last - cellDurs.First.Value;
        //    long cycles = (long)(cellDurs.First.Value / length);
		//
        //    cellDurs.First.Value -= length * cycles;
		//
        //    // rotate to the actual orientation
        //    double offset = cellDurs.First.Value;
        //    cellDurs.RemoveFirst();
		//
        //    while (offset >= cellDurs.Last.Value)
        //    {
        //        offset -= cellDurs.Last.Value;
        //        // rotate
        //        cellDurs.AddFirst(cellDurs.Last.Value);
        //        cellDurs.RemoveLast();
        //    }
		//
        //    // modify the layer
        //    string beatCode = string.Join(",", cellDurs.Select(x => x.ToString()));
		//
        //    Layer.SetBeatCode(beatCode, offset.ToString());
		//
        //    IsListening = false;
		//
        //    Presentor.DismissViewController(this);
        //}

        /// <summary>
        /// The tap action. triggered by a key bind to a button that is positioned off screen.
        /// </summary>
        /// <param name="sender">Sender.</param>
        //partial void TapAction(NSObject sender)
        //{
        //    if (IsListening)
        //    {
        //        Taps.AddLast(Metronome.Instance.ElapsedBpm);
        //    }
        //}
        #endregion

        #region Protected Methods
        protected string Quantize(double value)
        {
            // use doubles to determine which interval is the match
            //double dval = BeatCell.Parse(value);

            var qs = QuantizeIntervals
                .Select(x => (x, BeatCell.Parse(x)))
                .SelectMany(x => { 
                int div = (int)(value / x.Item2); 
                return new[] { (x.Item1, div * x.Item2, div), (x.Item1, (div + 1) * x.Item2, div + 1) }; 
            });

            string r = "";
            double diff = double.MaxValue;

            foreach ((string interval, double total, int div) in qs)
            {
                double d = Math.Abs(value - total);
                if (d < diff)
                {
                    r = BeatCell.MultiplyTerms(interval, div);
                    diff = d;
                }
            }

            return r;
        }

        //protected double Quantize(double value)
        //{
        //    var qs = QuantizeIntervals
        //        .SelectMany(x => { int div = (int)(value / x); return new double[] { div * x, (div + 1) * x }; });
        //    //.Min(x => Math.Abs(value - x));
		//
        //    double r = 0;
        //    double diff = double.MaxValue;
		//
        //    // find match with minimal difference
        //    foreach (double q in qs)
        //    {
        //        double d = Math.Abs(value - q);
        //        if (d < diff)
        //        {
        //            r = q;
        //            diff = d;
        //        }
        //    }
		//
        //    return r;
        //}
        #endregion
    }
}
