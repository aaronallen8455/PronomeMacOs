// This file has been autogenerated from a class added in the UI designer.

using System;
using Pronome.Mac.Visualizer.Graph;
using System.Collections.Generic;
using CoreAnimation;
using Pronome.Mac.Visualizer;

namespace Pronome.Mac
{
    public partial class BeatGraphView : AbstractVisualizerView
	{
        protected LinkedList<Ring> Rings;

		/// <summary>
		/// The length of the beat in bpm.
		/// </summary>
		protected double BeatLength;

        protected double BpmAccumulator;

        public BeatGraphView (IntPtr handle) : base (handle) 
        {
            BeatLength = Metronome.Instance.GetQuartersForCompleteCycle();

			// build the graph, get rings
			Rings = GraphingHelper.BuildGraph(Layer, BeatLength);

            // attach the layer delegate
            AnimationLayer.Delegate = new GraphLayerDelegate()
            {
                BeatLength = BeatLength
            };

			Metronome.Instance.Started += Instance_Started;
        }

        public override void DrawFrame(double bpm)
        {
            BpmAccumulator += bpm;
            BpmAccumulator %= BeatLength;

			// pass the accumulated BPM to the layer delegate
			((GraphLayerDelegate)AnimationLayer.Delegate).BpmAccumulator = BpmAccumulator;

            // determines duration of the blink effect
			CATransaction.AnimationDuration = .1;

			AnimationLayer.SetNeedsDisplay();
            // progress the rings. Animate any blinking if needed.
            foreach (Ring ring in Rings)
            {
                ring.Progress(bpm);
            }
        }

        void Instance_Started(object sender, EventArgs e)
        {
            BpmAccumulator = 0;
        }
    }
}
