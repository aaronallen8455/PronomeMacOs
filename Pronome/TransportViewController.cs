// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using Foundation;
using AppKit;

namespace Pronome
{
    public partial class TransportViewController : NSViewController
    {
        public TransportViewController(IntPtr handle) : base(handle)
        {
        }

        #region Computed Properties
        /// <summary>
        /// Gets the metronome instance.
        /// </summary>
        /// <value>The metronome.</value>
        [Export("Metronome")]
        public Metronome Metronome
        {
            get => Metronome.Instance;
        }
        #endregion

        #region Override Methods
        /// <summary>
        /// Creates a new layer and adds it to the interface
        /// </summary>
        /// <param name="sender">Sender.</param>
        partial void NewLayerAction(NSObject sender)
        {
            var parent = ParentViewController as NSSplitViewController;
            // get the collection view controller
            var layerViewC = parent.SplitViewItems[1].ViewController as LayerViewController;

            layerViewC.AddLayer(new Layer());
        }

        partial void PlayButtonAction(NSObject sender)
        {
            // focus and unfocus the tempo field to cause edits to beat code to be committed
            TempoField.BecomeFirstResponder();
            TempoField.AbortEditing();

            if (Metronome.Instance.Play())
            {
                // disable the play button
                PlayButton.Enabled = false;
                // enable the pause and stop buttons
                PauseButton.Enabled = true;
                StopButton.Enabled = true;
            }
        }

        partial void PauseButtonAction(NSObject sender)
        {
            if (Metronome.Instance.Pause())
            {
                // enable the play button
                PlayButton.Enabled = true;
                // disable the pause button
                PauseButton.Enabled = false;
            }
        }

        partial void StopButtonAction(NSObject sender)
        {
            if (Metronome.Instance.Stop())
            {
                // enable the play button
                PlayButton.Enabled = true;
                // disable the pause and stop buttons
                PauseButton.Enabled = false;
                StopButton.Enabled = false;
            }
        }

        partial void TempoButtonAction(NSObject sender)
        {
            long curStmp = Stopwatch.GetTimestamp();

            if (_lastTimestamp == 0)
            {
                _lastTimestamp = curStmp;
            }
            else
            {
                double interval = (curStmp - _lastTimestamp) / (double)Stopwatch.Frequency;
                _lastTimestamp = curStmp;
                // if the interval is greater than 2 sec, reset it
                if (interval >= 2)
                {
                    _tempoTicks.Clear();
                }
                else
                {
                    // get the average
                    _tempoTicks.AddFirst(interval);
                    double avg = _tempoTicks.Take(Math.Min(6, _tempoTicks.Count)).Sum() / (Math.Min(6, _tempoTicks.Count));
                    float newTempo = (float)(60 / avg);
                    // apply new tempo
                    Metronome.Instance.Tempo = newTempo;
                }
            }
        }
        #endregion

        #region Private Variables
        long _lastTimestamp; // time position in seconds

        LinkedList<double> _tempoTicks = new LinkedList<double>();
        #endregion
    }
}
