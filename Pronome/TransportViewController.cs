// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using Foundation;
using AppKit;
using System.Text.RegularExpressions;

namespace Pronome.Mac
{
    public partial class TransportViewController : NSViewController
    {
        public static TransportViewController Instance;

        public TransportViewController(IntPtr handle) : base(handle)
        {
            Instance = this;
        }	

        #region Computed Properties
        /// <summary>
        /// Gets the metronome instance.
        /// </summary>
        /// <value>The metronome.</value>
        [Export("Metronome")]
        public Metronome Metronome
        {
            get => Metronome.Instance;
        }

		/// <summary>
		/// Gets or sets the datasource that provides data to display in the 
		/// collection view.
		/// </summary>
		/// <value>The datasource.</value>
		public LayerCollectionViewDataSource Datasource { get; set; }
		#endregion

		#region Public Methods
        /// <summary>
        /// Create a new layer and add it to backend and frontend
        /// </summary>
        public void NewLayer(string beat = "1", StreamInfoProvider baseSource = null, string offset = "", float pan = 0f, float volume = 1f)
        {
            // remove white space from beatcode
            beat = Regex.Replace(beat, @"\s", "");

			// when adding layer while playing,
			// need to switch to Stopped so that the layer gets fully instantiated
			var currentState = Metronome.Instance.PlayState;
			Metronome.Instance.PlayState = Metronome.PlayStates.Stopped;
            Layer newLayer = new Layer(beat, baseSource, offset, pan, volume);
			Metronome.Instance.PlayState = currentState;

            newLayer.SourceInput = newLayer.BaseStreamInfo.ToString();

			// if playing, mute the new layer and sync it
			if (Metronome.Instance.PlayState != Metronome.PlayStates.Stopped)
			{
				newLayer.IsMuted = true;
				Metronome.Instance.ExecuteLayerChange(newLayer);
			}

			AddLayer(newLayer);
        }

		/// <summary>
		/// Adds the new layer.
		/// </summary>
		/// <param name="layer">Layer.</param>
		public void AddLayer(Layer layer)
		{
            // sometimes the colors get stripped
            //ColorAllBeatCodeSyntax();
            
            // add the layer to the datasource
            Datasource.Data.Add(layer);

            LayerCollection.ReloadData();

            //Metronome.Instance.AddLayer(layer);
		}

		/// <summary>
		/// Removes the layer.
		/// </summary>
		/// <param name="layer">Layer.</param>
		public void RemoveLayer(Layer layer)
		{
			Datasource.Data.Remove(layer);

			LayerCollection.ReloadData();

			// sometimes the colors get stripped
			//ColorAllBeatCodeSyntax();

			// remove from metronome
			Metronome.Instance.RemoveLayer(layer);
		}
		#endregion

		#region Private Methods
		private void ConfigureCollectionView()
		{
			LayerCollection.RegisterClassForItem(typeof(LayerItemController), "LayerCell");

			// Create flow layout
			var flowLayout = new NSCollectionViewFlowLayout()
			{
				ItemSize = new CoreGraphics.CGSize(650, 117),
				SectionInset = new NSEdgeInsets(10, 0, 10, 0),
				MinimumLineSpacing = 10,
				MinimumInteritemSpacing = 10
			};
			LayerCollection.WantsLayer = true;

			// Setup collection view
			LayerCollection.CollectionViewLayout = flowLayout;
		}

		private void PopulateWithData()
		{
            // Make datasource
            Datasource = new LayerCollectionViewDataSource(LayerCollection);

            // this will instantiate the previous session if enabled
            UserSettings.GetSettings().GetSettingsFromStorage();
            // use the persisted session if enabled, otherwise create a new one
            if (Metronome.Instance.Layers.Count == 0)
            {
				NewLayer();
            }
		}

        #endregion

        #region Override Methods
        /// <summary>
        /// Creates a new layer and adds it to the interface
        /// </summary>
        /// <param name="sender">Sender.</param>
        partial void NewLayerAction(NSObject sender)
        {
            NewLayer();
        }

        partial void PlayButtonAction(NSObject sender)
        {
            // remove focus from any fields to complete editing.
            NSApplication.SharedApplication.MainWindow.MakeFirstResponder(null);

            if (Metronome.Instance.Play())
            {
                // disable the play button
                PlayButton.Enabled = false;
                // enable the pause and stop buttons
                PauseButton.Enabled = true;
                StopButton.Enabled = true;
            }
        }

        partial void PauseButtonAction(NSObject sender)
        {
            if (Metronome.Instance.Pause())
            {
                // enable the play button
                PlayButton.Enabled = true;
                // disable the pause button
                PauseButton.Enabled = false;
            }
        }

        partial void StopButtonAction(NSObject sender)
        {
            if (Metronome.Instance.Stop())
            {
                // enable the play button
                PlayButton.Enabled = true;
                // disable the pause and stop buttons
                PauseButton.Enabled = false;
                StopButton.Enabled = false;
            }
        }

        partial void TempoButtonAction(NSObject sender)
        {
            long curStmp = Stopwatch.GetTimestamp();

            if (_lastTimestamp == 0)
            {
                _lastTimestamp = curStmp;
            }
            else
            {
                double interval = (curStmp - _lastTimestamp) / (double)Stopwatch.Frequency;
                _lastTimestamp = curStmp;
                // if the interval is greater than 2 sec, reset it
                if (interval >= 2)
                {
                    _tempoTicks.Clear();
                }
                else
                {
                    // get the average
                    _tempoTicks.AddFirst(interval);
                    double avg = _tempoTicks.Take(Math.Min(6, _tempoTicks.Count)).Sum() / (Math.Min(6, _tempoTicks.Count));
                    float newTempo = (float)(60 / avg);
                    // apply new tempo
                    Metronome.Instance.Tempo = newTempo;
                }
            }
        }

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			// Initialize collection view
			ConfigureCollectionView();
			PopulateWithData();

		}
		#endregion

		#region Private Variables
		long _lastTimestamp; // time position in seconds

        LinkedList<double> _tempoTicks = new LinkedList<double>();
        #endregion
    }
}
