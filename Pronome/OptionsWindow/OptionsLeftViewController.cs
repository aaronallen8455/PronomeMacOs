// This file has been autogenerated from a class added in the UI designer.

using System;
using Pronome.OptionsWindow;
using Foundation;
using AppKit;

namespace Pronome
{
    public partial class OptionsLeftViewController : NSViewController
    {
        #region Private Variables
        private SubviewType ViewType = SubviewType.None;
        #endregion

        #region Constructors
        public OptionsLeftViewController(IntPtr handle) : base(handle)
        {
        }
        #endregion

        #region Private Methods
        private void DisplaySubview(SubviewType type)
        {
            // is this view already displayed?
            if (ViewType == type) return;

            // save values
            ViewType = type;
            RaiseViewTypeChanged(type);
        }
        #endregion

        #region Override Methods
        public override void AwakeFromNib()
        {
            base.AwakeFromNib();

            // populate source list
            SourceList.Initialize();

            var tableView = new OptionItem("User Settings");

            tableView.AddItem(new OptionItem("Random Muting", "", () => DisplaySubview(SubviewType.RandomMuting)));
            tableView.AddItem(new OptionItem("Intervallic Muting", "", () => DisplaySubview(SubviewType.IntervallicMuting)));
            tableView.AddItem(new OptionItem("Save and Load", "", () => DisplaySubview(SubviewType.SaveAndLoad)));
            tableView.AddItem(new OptionItem("Custom Sound Library", "", () => DisplaySubview(SubviewType.CustomSoundLibrary)));
            tableView.AddItem(new OptionItem("Wav File Creation", "", () => DisplaySubview(SubviewType.WavFileCreation)));
            tableView.AddItem(new OptionItem("Visuals", "", () => DisplaySubview(SubviewType.Visuals)));
            tableView.AddItem(new OptionItem("Additional Settings", "", () => DisplaySubview(SubviewType.AdditionalSettings)));

            SourceList.AddItem(tableView);
            // display source list
            SourceList.ReloadData();
            SourceList.ExpandItem(null, true);
        }
        #endregion

        #region Events
        public delegate void ViewTypeChangedDelegate(SubviewType viewType);
        public event ViewTypeChangedDelegate ViewTypeChanged;

        internal void RaiseViewTypeChanged(SubviewType type)
        {
            ViewTypeChanged?.Invoke(type);
        }
        #endregion
    }
}
