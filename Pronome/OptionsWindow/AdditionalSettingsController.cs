// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;

namespace Pronome.Mac
{
    public partial class AdditionalSettingsController : NSViewController
    {
        #region Private Fields
        StreamInfoProvider _selectedSource;
        #endregion

        #region Public Properties
        [Export("Settings")]
        public UserSettings Settings
        {
            get => UserSettings.GetSettings();
        }

        [Export("Metronome")]
        public Metronome Metronome
        {
            get => Metronome.Instance;
        }

        [Export("streamInfoProviderArray")]
        public NSArray CustomSources
        {
            get => UserSettings.GetSettings().UserSourceLibrary;
        }

        [Export("SelectedSource")]
        public StreamInfoProvider SelectedSource
        {
            get => _selectedSource;
            set
            {
                WillChangeValue("SelectedSource");
                _selectedSource = value;
                DidChangeValue("SelectedSource");
            }
        }
        #endregion

        #region Constructors
        public AdditionalSettingsController(IntPtr handle) : base(handle)
        {
        }
        #endregion

        #region Actions
        /// <summary>
        /// Opens dialog to get the seconds duration to export to a wav file.
        /// </summary>
        /// <param name="sender">Sender.</param>
        partial void ExportWavFileAction(NSObject sender)
        {
            // should use a modal segue instead...
        }

        /// <summary>
        /// Starts playing out to a wav file.
        /// </summary>
        /// <param name="sender">Sender.</param>
        partial void RecordWavFileAction(NSObject sender)
        {

        }
        #endregion

        #region Array Controller
        [Export("addObject:")]
        public void AddCustomSource(StreamInfoProvider source)
        {
            WillChangeValue("streamInfoProviderArray");
            UserSettings.GetSettings().UserSourceLibrary.Add(source);
            DidChangeValue("streamInfoProviderArray");
        }

        [Export("insertObject:inStreamInfoProviderArrayAtIndex:")]
        public void InsertCustomSource(StreamInfoProvider source, nint index)
        {
            WillChangeValue("streamInfoProviderArray");
            UserSettings.GetSettings().UserSourceLibrary.Insert(source, index);
            DidChangeValue("streamInfoProviderArray");
        }

        [Export("removeObjectFromStreamInfoProviderArrayAtIndex:")]
        public void RemoveCustomSource(nint index)
        {
            WillChangeValue("streamInfoProviderArray");
            UserSettings.GetSettings().UserSourceLibrary.RemoveObject(index);
            DidChangeValue("streamInfoProviderArray");
        }

        [Export("setStreamInfoProviderArray:")]
        public void SetCustomSources(NSMutableArray<StreamInfoProvider> array)
        {
            WillChangeValue("streamInfoProviderArray");
            UserSettings.GetSettings().UserSourceLibrary = array;
            DidChangeValue("streamInfoProviderArray");
        }
        #endregion

        #region Overrides
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            if (CustomSourceTable != null)
            {
				CustomSourceTable.SelectionDidChange += CustomSourceTable_SelectionDidChange;
            }
        }
        #endregion

        void CustomSourceTable_SelectionDidChange(object sender, EventArgs e)
        {
            if (CustomSourceTable.SelectedRowCount > 0)
            {
				nuint index = (nuint)CustomSourceTable.SelectedRow;
				
				SelectedSource = UserSettings.GetSettings().UserSourceLibrary.GetItem<StreamInfoProvider>(index);
            }
            else
            {
                SelectedSource = null;
            }
        }
    }
}
