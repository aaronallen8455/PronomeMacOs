// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;

namespace Pronome.Mac
{
    public partial class AdditionalSettingsController : NSViewController
    {
        #region Private Fields
        StreamInfoProvider _selectedSource;
        #endregion

        #region Public Properties
        [Export("Settings")]
        public UserSettings Settings
        {
            get => UserSettings.GetSettings();
        }

        [Export("Metronome")]
        public Metronome Metronome
        {
            get => Metronome.Instance;
        }

        [Export("streamInfoProviderArray")]
        public NSArray CustomSources
        {
            get => UserSettings.GetSettings().UserSourceLibrary;
        }

        [Export("SelectedSource")]
        public StreamInfoProvider SelectedSource
        {
            get => _selectedSource;
            set
            {
                WillChangeValue("SelectedSource");
                _selectedSource = value;
                DidChangeValue("SelectedSource");
            }
        }
        #endregion

        #region Constructors
        public AdditionalSettingsController(IntPtr handle) : base(handle)
        {
        }
        #endregion

        #region Actions
        /// <summary>
        /// Starts playing out to a wav file.
        /// </summary>
        /// <param name="sender">Sender.</param>
        partial void RecordWavFileAction(NSObject sender)
        {
            if (Metronome.Instance.Layers.Count == 0)
            {
				var alert = new NSAlert()
				{
					MessageText = "There are no layers in the beat."
				};
				alert.AddButton("Ok");

				alert.RunModal();

                return;
            }

			var dlg = new NSSavePanel();
			dlg.Title = "Save Wav File";
			dlg.AllowedFileTypes = new string[] { "wav" };

			if (dlg.RunModal() == 1)
			{
				NSUrl url = dlg.Url;

				if (url != null)
				{
					string path = url.Path;

                    Metronome.Instance.Mixer.QueueFileRecording(path);
				}
			}
        }

        partial void NewCustomSource(NSObject sender)
        {
            var dlg = NSOpenPanel.OpenPanel;
            dlg.CanChooseFiles = true;
            dlg.CanChooseDirectories = false;
            dlg.AllowedFileTypes = new string[] { "wav", "aiff", "mp3", "ogg" };

            if (dlg.RunModal() == 1)
            {
                var url = dlg.Urls[0];

                if (url != null)
                {
                    string path = url.Path;

                    string fileName = path.Substring(path.LastIndexOf('/') + 1);
                    fileName = fileName.Substring(0, fileName.LastIndexOf('.'));

                    var library = UserSettings.GetSettings().UserSourceLibrary;
                    // get index of new source
                    uint index = 1;
                    for (; index <= library.Count; index++)
                    {
                        if (library[index - 1].Index != index)
                        {
                            break;
                        }
                    }

                    var newSource = new StreamInfoProvider((int)index, path, fileName, StreamInfoProvider.HiHatStatuses.None, false);

                    AddCustomSource(newSource);

                    // need to update the source lists
                    StreamInfoProvider.OnUserSourcesChanged(null);
                }
            }
        }

        partial void RemoveCustomSource(NSObject sender)
        {
            if (SelectedSource != null)
            {
                // remove the source
                nint index = CustomSourceTable.SelectedRow;
                UserSettings.GetSettings().UserSourceLibrary.RemoveObject(index);
                CustomSourceTable.RemoveRows(new NSIndexSet(index), NSTableViewAnimation.SlideUp);
                CustomSourceTable.SelectRow(index, false);
                //RemoveCustomSource(index);

                StreamInfoProvider.OnUserSourcesChanged(null);
            }
        }
        #endregion

        #region Array Controller
        [Export("addObject:")]
        public void AddCustomSource(StreamInfoProvider source)
        {
            WillChangeValue("streamInfoProviderArray");
            UserSettings.GetSettings().UserSourceLibrary.Add(source);
            DidChangeValue("streamInfoProviderArray");
        }

        [Export("insertObject:inStreamInfoProviderArrayAtIndex:")]
        public void InsertCustomSource(StreamInfoProvider source, nint index)
        {
            WillChangeValue("streamInfoProviderArray");
            UserSettings.GetSettings().UserSourceLibrary.Insert(source, index);
            DidChangeValue("streamInfoProviderArray");
        }

        [Export("removeObjectFromStreamInfoProviderArrayAtIndex:")]
        public void RemoveCustomSource(nint index)
        {
            WillChangeValue("streamInfoProviderArray");
            UserSettings.GetSettings().UserSourceLibrary.RemoveObject(index);
            DidChangeValue("streamInfoProviderArray");
        }

        [Export("setStreamInfoProviderArray:")]
        public void SetCustomSources(NSMutableArray<StreamInfoProvider> array)
        {
            WillChangeValue("streamInfoProviderArray");
            UserSettings.GetSettings().UserSourceLibrary = array;
            DidChangeValue("streamInfoProviderArray");
        }
        #endregion

        #region Overrides
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            if (CustomSourceTable != null)
            {
                CustomSourceTable.SelectionDidChange += CustomSourceTable_SelectionDidChange;
            }
        }

        /// <summary>
        /// Assign the window delegate in here.
        /// </summary>
        public override void ViewDidAppear()
        {
            if (View.Window.Delegate == null)
            {
                View.Window.Delegate = new OptionsWindow.OptionsWindowDelegate(View.Window);
            }

            base.ViewDidAppear();
        }

        public override bool ShouldPerformSegue(string identifier, NSObject sender)
        {
            // cancel the segue if there arn't any layers
            if (identifier == "ExportSettings" && Metronome.Instance.Layers.Count == 0)
            {
				var alert = new NSAlert()
				{
					MessageText = "There are no layers in the beat."
				};
				alert.AddButton("Ok");

				alert.RunModal();

                return false;
            }

            return base.ShouldPerformSegue(identifier, sender);
        }

        public override void PrepareForSegue(NSStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            if (segue.Identifier == "ExportSettings")
            {
				var dialog = segue.DestinationController as ExportWavDialog;
				dialog.Presentor = this;
            }
        }
        #endregion

        #region Private Methods
        void CustomSourceTable_SelectionDidChange(object sender, EventArgs e)
        {
            if (CustomSourceTable.SelectedRowCount > 0)
            {
                nuint index = (nuint)CustomSourceTable.SelectedRow;

                SelectedSource = UserSettings.GetSettings().UserSourceLibrary.GetItem<StreamInfoProvider>(index);
            }
            else
            {
                SelectedSource = null;
            }
        }
        #endregion
    }
}
