// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using Foundation;
using AppKit;
using Pronome.Mac.Editor;
using System.Collections.Generic;
using Pronome.Mac.Editor.Action;
using System.Linq;

namespace Pronome.Mac
{
    public partial class EditorViewController : NSViewController
    {
        #region static fields
        /// <summary>
        /// The instance. Behaves like a singleton
        /// </summary>
        public static EditorViewController Instance;

        /// <summary>
        /// The undo stack.
        /// </summary>
        public static Stack<IEditorAction> UndoStack = new Stack<IEditorAction>(50);

        /// <summary>
        /// The redo stack.
        /// </summary>
        public static Stack<IEditorAction> RedoStack = new Stack<IEditorAction>(50);
        #endregion

        #region Computed Properties
        [Export("DView")]
        public DrawingView DView
        {
            get => DrawingView;
        }
        #endregion

        #region Constructor
        public EditorViewController(IntPtr handle) : base(handle)
        {
            Instance = this;
        }
        #endregion

        #region Public static methods
        public static void InitNewAction(IEditorAction action)
        {
            if (action.CanPerform())
            {
				action.Redo();
				UndoStack.Push(action);
				RedoStack.Clear();
            }
        }
        #endregion

        #region Actions
        /// <summary>
        /// Applies changes that were made to the beat.
        /// </summary>
        /// <param name="sender">Sender.</param>
        partial void ApplyChangesAction(NSObject sender)
        {
            DView.ChangesApplied = true;
        }

        /// <summary>
        /// Enable or disable the various menu items
        /// </summary>
        /// <returns><c>true</c>, if menu action was validated, <c>false</c> otherwise.</returns>
        /// <param name="item">Item.</param>
		[Action("validateMenuItem:")]
		public bool ValidateMenuAction(NSMenuItem item)
		{
			string actionName = item.Action.Name;

            CellTree selectedCells = DView.SelectedCells;
            bool cellsSelected = DView.SelectedCells.Root != null;

            switch(actionName)
            {
                case "undoBeat:":
                    if (UndoStack.Count > 0)
                    {
                        var action = UndoStack.Peek();

                        item.Title = "Undo " + action.HeaderText;

                        return true;
                    }

                    item.Title = "Undo";
                    return false;
                case "redoBeat:":
                    if (RedoStack.Count > 0)
                    {
                        var action = RedoStack.Peek();

                        item.Title = "Redo " + action.HeaderText;

                        return true;
                    }
                    item.Title = "Redo";
                    return false;
                case "createRepGroup:":
                    break;
                case "editRepGroup:":
                    break;
                case "removeRepGroup:":
					if (cellsSelected)
					{
                        var firstGroups = selectedCells.Min.Cell.RepeatGroups.Where(x => x.Cells.First() == selectedCells.Min.Cell);

                        var lastGroups = selectedCells.Max.Cell.RepeatGroups.Where(x => x.Cells.Last() == selectedCells.Max.Cell);

						return firstGroups.Intersect(lastGroups).Any();
					}
					return false;
                case "createMultGroup:":
                    break;
                case "multGroupDrawToScale:":
                    // assign state based on user setting
                    item.State = UserSettings.GetSettings().DrawMultToScale 
                        ? NSCellStateValue.On 
                        : NSCellStateValue.Off;
                    break;
                case "editMultGroup:":
                    break;
                case "removeMultGroup:":
                    if (cellsSelected)
                    {
                        var firstGroups = selectedCells.Min.Cell.MultGroups.Where(x => x.Cells.First() == selectedCells.Min.Cell);

                        var lastGroups = selectedCells.Max.Cell.MultGroups.Where(x => x.Cells.Last() == selectedCells.Max.Cell);

						return firstGroups.Intersect(lastGroups).Any();
                    }
                    return false;
                case "createRef:":
                    break;
                case "editRef:":
                    break;
                case "removeRef:":
                    break;
                case "moveCellsLeft:":
                    return cellsSelected;
                case "moveCellsRight:":
                    return cellsSelected;
                case "removeCells:":
                    return cellsSelected;
            }

			return true;
		}

        [Action("undoBeat:")]
        void UndoBeat(NSObject sender)
        {
            var action = UndoStack.Pop();

            action.Undo();

            RedoStack.Push(action);
        }

        [Action("redoBeat:")]
        void RedoBeat(NSObject sender)
        {
            var action = RedoStack.Pop();

            action.Redo();

            UndoStack.Push(action);
        }

		[Action("createRepGroup:")]
		void CreateRepGroup(NSObject sender)
		{

		}

		[Action("editRepGroup:")]
		void EditRepGroup(NSObject sender)
		{

		}

		[Action("removeRepGroup:")]
		void RemoveRepGroup(NSObject sender)
		{
            var action = new RemoveRepeatGroup(DView.SelectedCells);

            InitNewAction(action);
		}

        [Action("createMultGroup:")]
        void CreateMultGroup(NSObject sender)
        {
            
        }

		[Action("editMultGroup:")]
		void EditMultGroup(NSObject sender)
		{

		}

		[Action("removeMultGroup:")]
		void RemoveMultGroup(NSObject sender)
		{
            var action = new RemoveMultGroup(DView.SelectedCells);

            InitNewAction(action);
		}

        /// <summary>
        /// Activate or deactivate mult group scaling
        /// </summary>
        /// <param name="sender">Sender.</param>
        [Action("multGroupDrawToScale:")]
        void MultGroupDrawToScaleToggle(NSMenuItem sender)
        {
            // toggle the setting
            UserSettings.GetSettings().DrawMultToScale = !UserSettings.GetSettings().DrawMultToScale;

            // see if view needs to be resized
            double beforeLength = 0;
            double afterLength = 0;
            // redraw rows that have mults
            foreach (Row row in DView.Rows)
            {
                if (row.Duration > beforeLength) beforeLength = row.Duration;

                if (row.MultGroups.Any())
                {
					row.Redraw();

                    DView.QueueRowToDraw(row);
                }

                if (row.Duration > afterLength) afterLength = row.Duration;
			}
            // resize the canvas if necessary
            if (afterLength > beforeLength)
            {
                DView.ResizeFrame(afterLength);
            }
        }

		[Action("createRef:")]
		void CreateRef(NSObject sender)
		{

		}

		[Action("editRef:")]
		void EditRef(NSObject sender)
		{

		}

		[Action("removeRef:")]
		void RemoveRef(NSObject sender)
		{

		}

		[Action("moveCellsLeft:")]
		void MoveCellsLeft(NSObject sender)
		{
            var action = new MoveCells(DView.SelectedCells.ToArray(), DView.GridSpacingString, -1);

            InitNewAction(action);
		}

		[Action("moveCellsRight:")]
		void MoveCellsRight(NSObject sender)
		{
			var action = new MoveCells(DView.SelectedCells.ToArray(), DView.GridSpacingString, 1);

			InitNewAction(action);
		}

		[Action("removeCells:")]
		void RemoveCells(NSObject sender)
		{
            var action = new RemoveCells(DView.SelectedCells);

            InitNewAction(action);
		}
        #endregion
    }
}
